
import os
import sqlite3
import datetime
import telebot
from telebot import types

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OWNER_ID = int(input("–í–≤–µ–¥–∏—Ç–µ –í–∞—à Telegram ID: "))
TOKEN = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –í–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞: ")
BASE_DIR = os.path.dirname(os.path.abspath(''))
DB_PATH = os.path.join(BASE_DIR, 'data', 'data.db')
DATA_DIR = os.path.join(BASE_DIR, 'chats')
Premium = False
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)
user_states = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                blocked BOOLEAN DEFAULT FALSE)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                message TEXT,
                date TIMESTAMP,
                direction TEXT)''')
conn.commit()

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.from_user.id == OWNER_ID:
        markup = types.InlineKeyboardMarkup(row_width=2)
        buttons = [
            types.InlineKeyboardButton("üì® –ß–∞—Ç—ã", callback_data='chats'),
            types.InlineKeyboardButton("üÜï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", callback_data='new_chats'),
            types.InlineKeyboardButton("üì¨ –†–∞—Å—Å—ã–ª–∫–∏", callback_data='mails'),
            types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings'),
            types.InlineKeyboardButton("‚≠êÔ∏è –ü–æ–ª—É—á–∏—Ç—å Premium", callback_data='premium')
        ]
        markup.add(*buttons)
        bot.send_message(
            message.chat.id,
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
    else:
        bot.send_message(
            message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ."
        )


def mailer(message):

    try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_states[message.chat.id] = {'state': 'waiting_mail_ids'}
        bot.send_message(message.chat.id, "üÜî –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ mailer: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
@bot.message_handler(func=lambda message: message.chat.id in user_states
                     and user_states[message.chat.id]['state'] == 'waiting_mail_ids')
def get_mail_ids(message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_states[message.chat.id]['ids'] = message.text.split(',')
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        user_states[message.chat.id]['state'] = 'waiting_mail_repeats'
        bot.send_message(message.chat.id, "üî¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏:")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID: {e}")

@bot.message_handler(func=lambda message: message.chat.id in user_states
                     and user_states[message.chat.id]['state'] == 'waiting_mail_repeats')
def get_mail_repeats(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        if message.text.isdigit():
            repeats = int(message.text)
            user_states[message.chat.id]['repeats'] = repeats
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
            user_states[message.chat.id]['state'] = 'waiting_mail_text'
            bot.send_message(message.chat.id, "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {e}")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@bot.message_handler(func=lambda message: message.chat.id in user_states
                                          and user_states[message.chat.id]['state'] == 'waiting_mail_text')
@bot.message_handler(func=lambda message: message.chat.id in user_states
                                          and user_states[message.chat.id]['state'] == 'waiting_mail_text')
def send_mail(message):
    try:
        user_ids = user_states[message.chat.id]['ids']
        text = message.text
        repeats = user_states[message.chat.id]['repeats']

        success = 0
        errors = 0

        for _ in range(repeats):  # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
            for user_id in user_ids:
                try:
                    # –ß–∏—Å—Ç–∏–º ID –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
                    uid = int(user_id.strip())
                    bot.send_message(uid, text)
                    success += 1
                except Exception as e:
                    errors += 1
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user_id}: {e}")
                    bot.send_message(OWNER_ID, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user_id}: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del user_states[message.chat.id]

        # –û—Ç—á–µ—Ç
        report = f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {errors}"
        bot.send_message(message.chat.id, report)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")


def show_chats_list(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    try:
        cursor.execute("SELECT DISTINCT user_id FROM messages")
        chats = cursor.fetchall()

        if not chats:
            bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
            return

        markup = types.InlineKeyboardMarkup(row_width=2)
        for chat in chats:
            user_id = chat[0]
            cursor.execute("SELECT username, first_name FROM users WHERE id = ?", (user_id,))
            user_data = cursor.fetchone()
            if user_data:
                username = user_data[0] if user_data[0] else "Unknown"
                name = user_data[1] if user_data[1] else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                button_text = f"{name} (@{username})" if username else name
            else:
                button_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id})"

            markup.add(types.InlineKeyboardButton(
                text=button_text,
                callback_data=f'chat_{user_id}'
            ))

        bot.send_message(message.chat.id, "üìÇ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:", reply_markup=markup)

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤")
        print(repr(e))


def new_chats(message):
    try:
        bot.send_message(message.chat.id, "üÜî –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        user_states[message.chat.id] = {'state': 'waiting_for_id', 'recipient_id': None}  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID
    except Exception as e:
        bot.answer_callback_query(OWNER_ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        print(repr(e))

@bot.message_handler(func=lambda message: message.chat.id in user_states and user_states[message.chat.id]['state'] == 'waiting_for_id')
def get_recipient_id(message):
    try:
        if message.text.isdigit() and 8 <= len(message.text) <= 12:
            new_id = int(message.text)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int
            print(f"–ü–æ–ª—É—á–µ–Ω ID: {new_id}")
            cursor.execute(f"""CREATE TABLE IF NOT EXISTS user_{new_id} (
                                                        col_id INTEGER PRIMARY KEY AUTOINCREMENT,
                                                        id INT,
                                                        text TEXT,
                                                        date TEXT);
                                                    """)
            conn.commit()
            user_states[message.chat.id]['recipient_id'] = new_id
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            user_states[message.chat.id]['state'] = 'waiting_for_message'
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (8-12 —Ü–∏—Ñ—Ä).")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ get_recipient_id:", repr(e))  # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


@bot.message_handler(func=lambda message: message.chat.id in user_states and user_states[message.chat.id][
    'state'] == 'waiting_for_message')
def get_message_text(message):
    if message.text:
        mess = message.text
        recipient_id = user_states[message.chat.id]['recipient_id']

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users
        cursor.execute('''
            INSERT OR IGNORE INTO users (id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (recipient_id, None, "–ß–∞—Ç", None))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å user_id –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        cursor.execute('''
            INSERT INTO messages (user_id, message, date, direction)
            VALUES (?, ?, ?, ?)
        ''', (recipient_id, mess, message.date, 'outgoing'))

        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(recipient_id, mess)
        bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}.")
        save_message_to_history(recipient_id, f"üü¢{mess}", '–ò–°–•–û–î–Ø–©–ï–ï')

        del user_states[message.chat.id]
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

def premium():
    print("Premium")

def create_chat_folder(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞"""
    chat_dir = os.path.join(DATA_DIR, f'user_{user_id}')
    media_dir = os.path.join(chat_dir, 'media')
    os.makedirs(media_dir, exist_ok=True)
    return chat_dir

def save_message_to_history(user_id, message, direction):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    chat_dir = create_chat_folder(user_id)
    history_path = os.path.join(chat_dir, 'history.txt')
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with open(history_path, 'a', encoding='utf-8') as f:
        f.write(f"[{timestamp}] {direction}: {message}\n")

def save_media(user_id, file_id, file_type):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_dir = create_chat_folder(user_id)
    media_dir = os.path.join(chat_dir, 'media')

    try:
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_path = os.path.join(media_dir, file_info.file_path.split('/')[-1])

        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        return file_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞: {e}")
        return None



@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
    try:
        if call.data == 'chats':
            show_chats_list(call.message)
        elif call.data == 'mails':
            mailer(call.message)
        elif call.data == 'new_chats':
            new_chats(call.message)
        elif call.data == 'settings':
            show_settings(call.message)
        elif call.data.startswith('chat_'):
            handle_chat_selection(call)
        elif call.data.startswith('block_'):
            user_id = int(call.data.split('_')[1])
            cursor.execute("UPDATE users SET blocked = 1 WHERE id = ?", (user_id,))
            conn.commit()
            bot.answer_callback_query(call.id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        elif call.data.startswith('unblock_'):
            user_id = int(call.data.split('_')[1])
            cursor.execute("UPDATE users SET blocked = 0 WHERE id = ?", (user_id,))
            conn.commit()
            bot.answer_callback_query(call.id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        elif call.data.startswith('history_'):
            user_id = int(call.data.split('_')[1])
            get_history(user_id, call.message)
        elif call.data.startswith('clear_'):
            user_id = int(call.data.split('_')[1])
            clear_history(user_id, call.message)
        elif call.data.startswith('reply_'):
            user_id = int(call.data.split('_')[1])
            user_states[call.message.chat.id] = {'state': 'waiting_reply', 'recipient_id': user_id}
            bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        elif call.data.startswith('premium'):
            premium()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def get_history(user_id: int, message: types.Message) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
    print(user_id)
    chat_dir = create_chat_folder(user_id)
    history_path = os.path.join(chat_dir, 'history.txt')

    if not os.path.exists(history_path):
        bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø—É—Å—Ç–∞")
        return

    try:
        with open(history_path, 'r', encoding='utf-8') as f:
            history = f.read()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
            for i in range(0, len(history), 4000):
                bot.send_message(message.chat.id, history[i:i+4000])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def clear_history(user_id: int, message: types.Message) -> None:
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
    chat_dir = create_chat_folder(user_id)
    history_path = os.path.join(chat_dir, 'history.txt')

    try:
        if os.path.exists(history_path):
            os.remove(history_path)
            bot.send_message(message.chat.id, "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –æ—á–∏—â–µ–Ω–∞")
        else:
            bot.send_message(message.chat.id, "‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —É–∂–µ –ø—É—Å—Ç–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")

def handle_chat_selection(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    try:
        user_id = call.data.split('_')[1]
        bot.send_message(call.message.chat.id, f"üîç –í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∞—Ç —Å ID: {user_id}")

        markup = types.InlineKeyboardMarkup(row_width=2)
        buttons = [
            types.InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'unblock_{user_id}'),
            types.InlineKeyboardButton("‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'block_{user_id}'),
            types.InlineKeyboardButton("üóÑ –ò—Å—Ç–æ—Ä–∏—è", callback_data=f'history_{user_id}'),
            types.InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data=f'clear_{user_id}'),
            types.InlineKeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f'reply_{user_id}')

        ]
        markup.add(*buttons)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞: {e}")

def start_new_chat(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"""
    bot.send_message(message.chat.id, "üÜî –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    user_states[message.from_user.id] = {'state': 'waiting_id'}

@bot.message_handler(func=lambda m: m.from_user.id in user_states and user_states[m.from_user.id]['state'] == 'waiting_id')
def handle_new_id(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    if message.text.isdigit() and 8 <= len(message.text) <= 12:
        user_id = int(message.text)
        user_states[message.from_user.id] = {
            'state': 'waiting_message',
            'user_id': user_id
        }
        bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ 8-12 —Ü–∏—Ñ—Ä.")



def show_settings(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    settings_text = f"""‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:

ID –≤–ª–∞–¥–µ–ª—å—Ü–∞: {OWNER_ID}
–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {TOKEN}
Premium: {Premium}
–í–µ—Ä—Å–∏—è: 2.0
"""
    bot.send_message(message.chat.id, settings_text)


@bot.message_handler(func=lambda message: message.chat.id in user_states
                                          and user_states[message.chat.id]['state'] == 'waiting_reply')
def handle_reply_message(message):
    try:
        recipient_id = user_states[message.chat.id]['recipient_id']
        mess = message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        cursor.execute('''
            INSERT INTO messages (user_id, message, date, direction)
            VALUES (?, ?, ?, ?)
        ''', (recipient_id, mess, message.date, 'outgoing'))
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(recipient_id, mess)
        bot.send_message(message.chat.id, f"‚úâÔ∏è –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
        save_message_to_history(recipient_id, f"üü¢{mess}", '–ò–°–•–û–î–Ø–©–ï–ï')

        del user_states[message.chat.id]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")

@bot.message_handler(func=lambda m: m.from_user.id != OWNER_ID and not m.text.startswith('/'))
def handle_user_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user = message.from_user

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        cursor.execute('INSERT OR IGNORE INTO users (id, username, first_name, last_name) VALUES (?,?,?,?)',
                       (user.id, user.username, user.first_name, user.last_name))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        msg_text = message.text or message.caption or "[–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ]"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        cursor.execute('INSERT INTO messages (user_id, message, date, direction) VALUES (?,?,?,?)',
                       (user.id, msg_text, message.date, 'incoming'))
        conn.commit()
        save_message_to_history(user.id, f"üî¥{msg_text}", '–í–•–û–î–Ø–©–ï–ï')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        if message.photo:
            save_media(user.id, message.photo[-1].file_id, 'photo')
            bot.send_message(OWNER_ID, f"{user.id}  {message.photo[-1].file_id}")
        elif message.document:
            save_media(user.id, message.document.file_id, 'document')
        elif message.audio:
            save_media(user.id, message.audio.file_id, 'audio')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'block_{user.id}'),
            types.InlineKeyboardButton("üì® –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'reply_{user.id}')
        )

        bot.send_message(
            OWNER_ID,
            f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (@{user.username}):\n\n{msg_text}",
            reply_markup=markup
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
